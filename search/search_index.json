{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Microsims Social Test Website","text":"<ul> <li>Bouncing Ball</li> <li>Gold Star</li> </ul>"},{"location":"contact/","title":"Contact","text":"<p>Dan McCreary</p>"},{"location":"how-we-built-this-site/","title":"How we built this site","text":""},{"location":"how-we-built-this-site/#mkdocs","title":"Mkdocs","text":""},{"location":"how-we-built-this-site/#theme","title":"Theme","text":""},{"location":"how-we-built-this-site/#scheme-colors","title":"Scheme Colors","text":"<ol> <li>Make sure that <code>pallette:</code> is under <code>`theme:</code>.</li> <li>Make sure that <code>scheme: default</code> is under <code>palette:</code></li> <li>Make sure that <code>primary: blue</code> and <code>accent: orange</code> is under <code>scheme:</code></li> </ol> <pre><code>theme:\n  name: material\n  logo: img/code-savvy-logo.png\n  favicon: img/favicon.ico\n  include_sidebar: true\n  features:\n    - content.code.copy\n    - navigation.expand\n    - navigation.path\n    - navigation.prune\n    - navigation.indexes\n    - toc.follow\n    - navigation.top\n    # this adds the prev and next icons in the footer\n    - navigation.footer\n  palette:\n    - scheme: default\n      primary: blue\n      accent: orange\n</code></pre>"},{"location":"how-we-built-this-site/#social","title":"Social","text":""},{"location":"references/","title":"References for Testing Social Cards","text":"<p>We are using mkdocs and the Material Theme</p> <ul> <li> <p>Setting up social cards</p> </li> <li> <p>Open Graph Previewer</p> </li> <li>og:image URLs when using social cards</li> <li>Discussion</li> <li>Open Graph Test</li> <li>YouTube Video</li> <li>Favicon Converter - used to generate the site favicon from the logo</li> </ul>"},{"location":"test-metadata/","title":"Test Metadata","text":"<p>This is a test of adding metadata within the triple dashes.</p> <p></p>","tags":[]},{"location":"sims/","title":"Introduction to Sims","text":"<ul> <li>Bouncing Ball</li> <li>Gold Star</li> </ul>"},{"location":"sims/bouncing-ball/","title":"Bouncing Ball","text":"<p> A bouncing ball is our \"Hello World!\".</p> <p>Link to Bouncing Ball Demo</p> <p>The bouncing ball is the \"Hello World!\" of the Processing system. It contains the key element that shows the power of the Processing system: graphics with movement.  In the area of MicroSims, we also want clearly visible user interface elements that can control the running of our simulations.  This version contains a  slider to control the speed of the ball's movement.</p>"},{"location":"sims/bouncing-ball/#prompt","title":"Prompt","text":"<p>Here is a simple prompt to get you started.</p> <pre><code>Generate a single p5.js sketch of a blue bouncing ball on a 500x300 canvas.\n</code></pre> <p>Copy the prompt into ChatGPT.  It will generate a JavaScript file you can copy and paste or download into the p5.js editor to test.</p> <p>Here is a more precise prompt that also allows us to change the speed using a slider.</p> <pre><code>The sketch shows a ball bouncing around a rectangular area.\nThe canvas should be 500 wide and 300 high.\nThe default text size is 16.\nThe ball is blue and has a radius of 20.\nThere is a slider that changes the speed from 0 to 20 with a default speed of 3.\nThe slider should be placed at the bottom of the canvas.\nThe slider should have a label \"Speed: \" and the speed value to the left of the slider.\nThe slider should span the width of the canvas after the label and value.\nDD NOT use objects - just functions.\n</code></pre> <p>Here is an additional example that allows the user to change both the speed and the ball size:</p>"},{"location":"sims/bouncing-ball/#sample-source-code","title":"Sample Source Code","text":"<p>Here is some sample source code that has been generated and modified just a little for readability.</p> <pre><code>// bouncing ball - version 1\n// designed for use using touch sensitive whiteboard in a classroom\n\nlet width = 500;\nlet height = 350;\nlet drHieght = 320; // region for drawing\nr = 20; // radius of the ball\n\n// initial position\nx = 100;\ny = 100;\nspeed = 3; // default speed\n// direction of motion\ndx = speed;\ndy = speed;\nsliderLeftMargin = 83;\n\nfunction setup() {\n  const canvas = createCanvas(width, height);\n  // Include this for placement in our HTML page but not in the editor\n  // canvas.parent('canvas-container');\n\n  // make the text a bit larger for large classrooms\n  textSize(16);\n\n  speedSlider = createSlider(0, 20, speed);\n  speedSlider.position(sliderLeftMargin, height - 25);\n  speedSlider.style('width', width - sliderLeftMargin - 15 + 'px');\n}\n\nfunction draw() {\n  background(240); // light gray\n\n  speed = speedSlider.value()\n\n  if (dx &gt; 0) dx = speed;\n     else dx = -speed;\n\n  if (dy &gt; 0) dy = speed;\n     else dy = -speed;\n\n  // Add the current speed to the position.\n  x += dx;\n  y += dy;\n\n  if ((x &gt; width) || (x &lt; 0)) {\n    dx = dx * -1;\n  }\n  if ((y &gt; drHieght) || (y &lt; 0)) {\n    dy = dy * -1;\n  }\n\n  fill('blue');\n  circle(x, y, r*2);\n  fill('black');\n  text('Speed: ' + speed, 10, height-10)\n}\n</code></pre>"},{"location":"sims/bouncing-ball/#key-points-about-the-code","title":"Key Points about the Code","text":"<ol> <li>We created some global variables before the setup() function</li> <li>We created a setup() function to initialize the canvas and the slider</li> <li>We created a draw() function to render check that moves the ball, checks the edges, and draws the circle and text.</li> </ol>"},{"location":"sims/bouncing-ball/#use-in-classroom","title":"Use In Classroom","text":"<ol> <li>Physics Lesson: Use this simulation to discuss concepts like velocity, acceleration, and kinetic energy. Ask students to predict how changing the speed will affect the ball's movement.</li> <li>Math Integration: Introduce concepts of geometry and algebra, such as calculating the ball's trajectory or the distance traveled over time.</li> <li>Coding Concepts: Use this as a base for teaching basic programming concepts, such as variables, functions, and object-oriented programming. Students can modify the code to change the ball's size, color, or even add more balls.</li> </ol>"},{"location":"sims/bouncing-ball/#lesson-plan-for-a-9th-grade-physical-science-class","title":"Lesson Plan for a 9th-Grade Physical Science Class","text":""},{"location":"sims/bouncing-ball/#objective","title":"Objective","text":"<p>Students will understand the concepts of kinetic and potential energy, and how these energies are transformed during the motion of a bouncing ball.</p>"},{"location":"sims/bouncing-ball/#materials","title":"Materials","text":"<ul> <li>Computer with internet access for the p5.js editor.</li> <li>The bouncing ball simulation (as provided in the previous response).</li> <li>Whiteboard or chalkboard.</li> <li>Writing materials for students.</li> </ul>"},{"location":"sims/bouncing-ball/#lesson-plan","title":"Lesson Plan","text":""},{"location":"sims/bouncing-ball/#introduction-10-minutes","title":"Introduction (10 minutes)","text":"<ul> <li>Begin with a brief discussion on energy: what it is and its different forms, focusing on kinetic and potential energy.</li> <li>Introduce the concept of energy transformation, particularly how potential energy is converted to kinetic energy and vice versa.</li> </ul>"},{"location":"sims/bouncing-ball/#demonstration-15-minutes","title":"Demonstration (15 minutes)","text":"<ul> <li>Display the bouncing ball simulation to the class.</li> <li>Show how the ball\u2019s speed (kinetic energy) increases as it falls (due to potential energy converting to kinetic energy) and decreases as it rises (kinetic converting back to potential).</li> </ul>"},{"location":"sims/bouncing-ball/#interactive-activity-20-minutes","title":"Interactive Activity (20 minutes)","text":"<ul> <li>Have the students access the simulation on their computers.</li> <li>Ask them to experiment with different speeds and observe the ball\u2019s behavior.</li> <li>Prompt questions for exploration: </li> <li>How does changing the speed affect the ball\u2019s motion?</li> <li>Can they identify when the ball has the most kinetic or potential energy?</li> </ul>"},{"location":"sims/bouncing-ball/#group-discussion-15-minutes","title":"Group Discussion (15 minutes)","text":"<ul> <li>Bring the class back together to discuss their observations.</li> <li>Facilitate a conversation about how the simulation demonstrates the concepts of kinetic and potential energy.</li> <li>Discuss real-world examples, like a roller coaster or a skateboarder in a halfpipe.</li> </ul>"},{"location":"sims/bouncing-ball/#concept-application-20-minutes","title":"Concept Application (20 minutes)","text":"<ul> <li>Provide a worksheet with problems related to kinetic and potential energy.</li> <li>Include problems where students calculate the potential energy at the ball\u2019s highest point and the kinetic energy at different points of the motion.</li> <li>Students can use the simulation to visually understand the problems.</li> </ul>"},{"location":"sims/bouncing-ball/#wrap-up-and-reflection-10-minutes","title":"Wrap-Up and Reflection (10 minutes)","text":"<ul> <li>Summarize the key concepts learned in the lesson.</li> <li>Ask students to write a short paragraph on how the simulation helped them understand the energy transformation.</li> </ul>"},{"location":"sims/bouncing-ball/#homework","title":"Homework","text":"<ul> <li>Assign a project where students create their own simulation or modify the existing one to demonstrate a different physics concept.</li> </ul>"},{"location":"sims/bouncing-ball/#assessment","title":"Assessment","text":"<ul> <li>Participation in the interactive activity and group discussion.</li> <li>Accuracy and understanding shown in the worksheet.</li> <li>Reflection paragraph and homework project.</li> </ul>"},{"location":"sims/gold-star/","title":"Gold Star","text":"Use a slider to change the number of points in a star. <p>Gold Star Demo</p>"},{"location":"sims/gold-star/#prompt","title":"Prompt","text":"<pre><code>Draw a gold star width number points as a parameter.\n</code></pre>"},{"location":"sims/gold-star/#sample-code","title":"Sample Code","text":"<pre><code>// Draw a gold star width number points as a parameter\nlet pointsSlider;\nlet width = 400;\nlet height = 430;\nlet drawHeight = 400;\nlet cx = width / 2;\nlet cy = height / 2;\nlet sliderLeftMargin = 100;\n\nfunction setup() {\n  const canvas = createCanvas(width, height);\n  canvas.parent('canvas-container');\n  textSize(16);\n\n  pointsSlider = createSlider(4, 20, 10);\n  pointsSlider.position(90, height - 15);\n  pointsSlider.style('width', width - sliderLeftMargin +'px');\n}\n\nfunction draw() {\n  // fill the drawing area with a light gray background\n  fill(220);\n  rect(0,0,width,drawHeight);\n  fill(245);\n  rect(0,drawHeight,width,height);\n\n  // radius\n  const r = min(width, height) * 0.45;\n\n  // points\n  points = pointsSlider.value();\n\n  // tempory move of coordinate system to center\n  push();\n     translate(cx, cy);\n     star(0, 0, r * 0.6, r, points);\n  pop();\n\n  // draw the label and values in the control area\n  fill(0);\n  text(\"Points:\" + points, 10, height - 10);\n}\n\n// draw star at (x,y) with inner and outer radius and n points\nfunction star(x, y, radius1, radius2, npoints) {\n  let angle = TWO_PI / npoints;\n  let halfAngle = angle / 2.0;\n  fill('gold');\n  beginShape();\n  for (let a = 0; a &lt; TWO_PI; a += angle) {\n    let sx = x + cos(a) * radius2;\n    let sy = y + sin(a) * radius2;\n    vertex(sx, sy);\n    sx = x + cos(a + halfAngle) * radius1;\n    sy = y + sin(a + halfAngle) * radius1;\n    vertex(sx, sy);\n  }\n  endShape(CLOSE);\n}\n</code></pre>"},{"location":"sims/gold-star/#key-learnings","title":"Key Learnings","text":"<ol> <li>We create a new custom JavaScript function called <code>star()</code></li> <li>We add parameters for the inner radius, outer radius and number of points</li> <li>We use the <code>beginShape()</code> and <code>endShape()</code> to surround our points on the start</li> <li>We use <code>cos()</code> and <code>sin()</code> to calculate the proper x and y points as we go around the star</li> </ol>"},{"location":"sims/gold-star/#lesson-plan-drawing-stars-with-variable-points","title":"Lesson Plan: Drawing Stars with Variable Points","text":""},{"location":"sims/gold-star/#objective","title":"Objective","text":"<p>Students will understand the geometric concepts of radius, angles, and symmetry by drawing stars programmatically.</p>"},{"location":"sims/gold-star/#grade-level","title":"Grade Level","text":"<p>9th Grade</p>"},{"location":"sims/gold-star/#subject","title":"Subject","text":"<p>Geometry</p>"},{"location":"sims/gold-star/#materials-needed","title":"Materials Needed","text":"<ul> <li>Computers with Internet access</li> <li>Projector for demonstration</li> <li>Students will need access to a web browser and provide a link to the p5.js editor. They can use the copy icon in the upper right corner of the code example above.</li> </ul>"},{"location":"sims/gold-star/#duration","title":"Duration","text":"<p>1 hour</p>"},{"location":"sims/gold-star/#activities","title":"Activities","text":""},{"location":"sims/gold-star/#introduction-5-minutes","title":"Introduction (5 minutes)","text":"<ul> <li>Discussion: Briefly discuss what students know about stars and their shapes. Introduce the concept of radius, angles, and symmetry in geometry.</li> <li>Demonstration: Show the star drawing code and explain the setup, draw functions, and the star function.</li> </ul>"},{"location":"sims/gold-star/#activity-part-1-exploring-the-code-10-minutes","title":"Activity Part 1: Exploring the Code (10 minutes)","text":"<ul> <li>Hands-On: Students will run the code and play with the points slider to see how the number of points affects the star's shape.</li> <li>Questions for Discussion: </li> <li>How does changing the number of points alter the shape of the star?</li> <li>What happens when you use different numbers of points (odd vs. even)?</li> </ul>"},{"location":"sims/gold-star/#activity-part-2-calculating-angles-15-minutes","title":"Activity Part 2: Calculating Angles (15 minutes)","text":"<ul> <li>Explanation: Explain how the angles in the star are calculated (<code>angle = TWO_PI / npoints</code>).</li> <li>Activity: Have students calculate the angles for different numbers of points and predict the shapes before testing them on the computer.</li> </ul>"},{"location":"sims/gold-star/#activity-part-3-customize-the-lab-10-minutes","title":"Activity Part 3: Customize the Lab (10 minutes)","text":"<ul> <li>Creative Task: Challenge students to modify the code to create different variations of the lab</li> <li>Add Color Sliders: Add a slider to change the fill color of the star, the border color and the border width.  Students will need to adjust the position of the sliders, labels and values. You will need to learn to use the strokeWeight function.</li> <li>Add New Radius Sliders: Add sliders for controlling the length of the inner and outer radius of the star.</li> <li>Sharing: Allow a few students to share their creations and explain the geometric concepts used.</li> <li>Use ChatGPT: Use ChatGPT to add new code and test the new code.</li> </ul>"},{"location":"sims/gold-star/#conclusion-5-minutes","title":"Conclusion (5 minutes)","text":"<ul> <li>Summary: Recap the key geometric concepts learned through the activity.</li> <li>Homework Assignment: Students can write a short reflection on what they learned about geometry from this exercise or create a small project where they use the code to explore a geometric concept.</li> </ul>"},{"location":"sims/gold-star/#assessment","title":"Assessment","text":"<ul> <li>Participation in discussions and activities.  Do they share their knowledge and their bugs?</li> <li>The ability of students to add features.</li> <li>Creativity and understanding of the concepts.</li> </ul>"},{"location":"sims/override-test/","title":"Mkdocs Material Social Image Override Test","text":"<p>This is a green circle on a rectangle with a 1.91 to 1 width-to-height ratio as suggested by the Open Graph Image guideline.</p>"},{"location":"sims/polygon/","title":"Polygon","text":"A multi-sided polygon. <p>Polygon Demonstration</p> <p>In this example, we will use a more detailed prompt to control the placement of the sliders and their values.</p>"},{"location":"sims/polygon/#prompt","title":"Prompt","text":"<pre><code>Generate a p5.js sketch file that draws filled polygons on a 400x400 canvas.\n\nCreate one range control slider that allows the number of points on\nthe polygon to vary from 3 to 10 in steps of 1.  Make the default be 10.\n\nCreate a second range control slider that allows the color inside the polygon\nto be changed to any color.  Make the default value be 170 (blue).\n\nMake the sliders be the width of the canvas less the width of the\nlabels and values.  Place the sliders at the bottom\nof the canvas 100 points in from the left.\n\nUse the text() function at the end of the draw() function to display the\nname and current values of the sliders in the bottom left of the screen.\n</code></pre>"},{"location":"sims/polygon/#sample-response","title":"Sample Response","text":"<p>This sample code has been manually edited to improve the placement and formatting of the controls.</p> <pre><code>// A MicroSim of drawing a polygon.  Sliders controls the number of edges and the color.\nlet canvasSize = 400;\nlet polygonRadius = 150\nlet colorSlider;\nlet pointSlider;\nlet drawHeight = 350;\nlet sliderLeftMargin = 140;\n\nfunction setup() { \n    const canvas = createCanvas(canvasSize, canvasSize);\n    canvas.parent('canvas-container');\n    textSize(16);\n    noStroke();\n    strokeWeight(0);\n    // Change the default color scheme from RGB to Hue, Saturation and Brightness\n    colorMode(HSB, 255);\n\n    // number of points (or edges) in polygon\n    pointSlider = createSlider(3, 20, 10);\n    pointSlider.position(sliderLeftMargin, canvasSize - 35);\n    pointSlider.style('width', width - sliderLeftMargin + 'px')\n\n    colorSlider = createSlider(0, 255, 170);\n    colorSlider.position(sliderLeftMargin, canvasSize - 15);\n    colorSlider.style('width', width - sliderLeftMargin + 'px')\n}\n\nfunction draw() {\n    fill(230);\n    rect(0, 0, width, drawHeight);\n    fill(245);\n    rect(0, drawHeight, width, canvasSize-drawHeight);\n    let colorValue = colorSlider.value();\n    let pointValue = pointSlider.value();\n\n    // Draw the polygon, HSB\n    fill(colorValue, 255, 255);\n    beginShape();\n    for (let i = 0; i &lt; pointValue; i++) {\n        // walk around the 360 angles\n        let angle = map(i, 0, pointValue, 0, TWO_PI);\n        let x = canvasSize/2 + polygonRadius * cos(angle);\n        let y = drawHeight/2 + polygonRadius * sin(angle);\n        vertex(x, y);\n    }\n    endShape(CLOSE);\n\n    // Draw the slider values\n    fill('black');\n    noStroke(); \n    strokeWeight(0);\n    text(\"Point Value: \" + pointValue, 5, canvasSize - 25);\n    text(\"Color Value: \" + colorValue, 5, canvasSize - 5);  \n}\n</code></pre>"},{"location":"sims/polygon/#lesson-plan","title":"Lesson Plan","text":""},{"location":"sims/polygon/#activities","title":"Activities","text":""},{"location":"sims/polygon/#add-slider","title":"Add Slider","text":"<p>Add a new slider to control the radius of the polygon.</p>"},{"location":"sims/sphere/","title":"Bouncing 3D Sphere Demo","text":"A 3D sphere rendered using the WebGL. <p>3D Sphere Demo</p> <p>We can also use the 3D \"WebGL\" rendering system that is built into p5.js.  WebGL, short for Web Graphics Library is is a JavaScript API for rendering interactive 2D and 3D graphics within any compatible web browser. The p5.js has many high-level 3D shapes such as box, cone, cylinder, ellipsoid, plane, sphere, and torus  in the WEBGL Library.</p>"},{"location":"sims/sphere/#sample-prompt","title":"Sample Prompt","text":"<pre><code>1. Generate a single file p5.js sketch using WEBGL for a 3D animation.\n2. Show a sphere of size 50 that is bouncing around the canvas.\n3. Use the ```WEBGL``` as the third parameter of the createCanvas.\n4. Cover the sphere with a texture that has grid of white and red squares.\n5. Use noStroke() in the texture to not draw the outlines of the grid.\n6. Add a drop shadow under the sphere\n\nfunction setup() {\n  createCanvas(600, 400, WEBGL);\n</code></pre>"},{"location":"sims/sphere/#sample-response","title":"Sample Response","text":"<pre><code>// A bouncing sphere with a red and white grid texture\nlet x, y, z;\nlet xspeed, yspeed, zspeed;\nlet diameter = 50;\nlet radius = diameter / 2;\nlet canvasWidth = 600;\nlet canvasHeight = 400;\n\nfunction setup() {\n  const canvas = createCanvas(canvasWidth, canvasHeight, WEBGL);\n  // comment this out if running in the example\n  canvas.parent('canvas-container');\n  x = 0;\n  y = 0;\n  z = 0;\n  xspeed = 2;\n  yspeed = 2.3;\n  zspeed = 1.7;\n}\n\nfunction draw() {\n  background(240);\n\n  // Update the position of the sphere\n  x += xspeed;\n  y += yspeed;\n  z += zspeed;\n\n  // Check for bouncing\n  if (x &gt; width/2 - radius || x &lt; -width/2 + radius) {\n    xspeed *= -1;\n  }\n  if (y &gt; height/2 - radius || y &lt; -height/2 + radius) {\n    yspeed *= -1;\n  }\n  if (z &gt; 200 - radius || z &lt; -200 + radius) {\n    zspeed *= -1;\n  }\n\n  // Draw the sphere with a texture\n  push();\n  translate(x, y, z);\n  texture(createGridTexture());\n  sphere(diameter);\n  pop();\n}\n\n// create texture pattern of a grid of white and red squares\nfunction createGridTexture() {\n  let texSize = 200;\n  let texture = createGraphics(texSize, texSize);\n  // I had to add this line by\n  noStroke();\n  for (let i = 0; i &lt; texSize; i += 20) {\n    for (let j = 0; j &lt; texSize; j += 20) {\n      texture.fill((i + j) % 40 === 0 ? 'white' : 'red');\n      texture.rect(i, j, 20, 20);\n    }\n  }\n  return texture;\n}\n</code></pre>"},{"location":"sims/sphere/#what-we-learned","title":"What We Learned","text":"<ul> <li>P5.js has a robust library of 3D animation tools</li> <li>We need to specify the WEBGL rendering library when we create the canvas</li> <li>Rendering is very fast and smooth if your computer supports the WebGL API standards</li> <li>P5.js has a library for generating 3D shapes such as cone, cube and sphere</li> <li>You can pass a function to the shape that indicates what pattern (texture) to use on the shape</li> <li>P5.js has a function that builds textures</li> <li>You just need to generate a 2D pattern to use that texture.</li> </ul>"},{"location":"sims/sphere/#extending-the-lesson","title":"Extending the Lesson","text":"<ul> <li>Add a drop shadow to the ball</li> <li>Place axis lines in the background</li> <li>Add a slider to control the speed and size of the sphere</li> </ul>"},{"location":"sims/sphere/#sample-lesson-plan","title":"Sample Lesson Plan","text":""},{"location":"sims/sphere/#objective","title":"Objective","text":"<ul> <li>Understand the basics of 3D rendering using p5.js.</li> <li>Learn how to manipulate 3D objects and apply textures.</li> <li>Develop skills in JavaScript and graphics programming.</li> </ul>"},{"location":"sims/sphere/#duration","title":"Duration","text":"<p>1 hour</p>"},{"location":"sims/sphere/#materials-needed","title":"Materials Needed","text":"<ul> <li>Computers with internet access.</li> <li>Code editor (like p5.js Web Editor).</li> <li>Projector for demonstrations.</li> </ul>"},{"location":"sims/sphere/#lesson-outline","title":"Lesson Outline","text":""},{"location":"sims/sphere/#1-introduction-to-p5js-and-3d-graphics-15-minutes","title":"1. Introduction to p5.js and 3D Graphics (15 minutes)","text":"<ul> <li>Brief overview of p5.js and its capabilities.</li> <li>Introduction to the concept of 3D graphics.</li> <li>Discuss the <code>WEBGL</code> renderer in p5.js.</li> </ul>"},{"location":"sims/sphere/#2-basic-3d-shapes-and-transformations-10-minutes","title":"2. Basic 3D Shapes and Transformations (10 minutes)","text":"<ul> <li>Demonstrate how to create basic 3D shapes (e.g., sphere).</li> <li>Explain translation and rotation in a 3D space.</li> </ul>"},{"location":"sims/sphere/#3-hands-on-coding-bouncing-sphere-15-minutes","title":"3. Hands-on Coding: Bouncing Sphere (15 minutes)","text":"<ul> <li>Students will follow along to create a basic 3D sketch with a bouncing sphere.</li> <li>Explain the concepts of <code>setup()</code> and <code>draw()</code> functions.</li> <li>Discuss coordinate systems and movement in 3D space.</li> </ul>"},{"location":"sims/sphere/#4-adding-texture-to-the-sphere-10-minutes","title":"4. Adding Texture to the Sphere (10 minutes)","text":"<ul> <li>Introduce the concept of textures in 3D.</li> <li>Guide students to modify their sketch to apply a grid texture to the sphere.</li> </ul>"},{"location":"sims/sphere/#5-customization-and-experimentation-5-minutes","title":"5. Customization and Experimentation (5 minutes)","text":"<ul> <li>Encourage students to modify the speed, size, and texture of the sphere.</li> <li>Discuss how these changes affect the animation.</li> </ul>"},{"location":"sims/sphere/#6-qa-and-discussion-5-minutes","title":"6. Q&amp;A and Discussion (5 minutes)","text":"<ul> <li>Open the floor for questions.</li> <li>Discuss potential applications of what they've learned.</li> </ul>"},{"location":"sims/sphere/#assessment","title":"Assessment","text":"<ul> <li>Observe student engagement and understanding during the hands-on coding session.</li> <li>Review the modifications students make to their sketches for creativity and understanding.</li> </ul>"},{"location":"sims/sphere/#follow-up-activities","title":"Follow-Up Activities","text":"<ul> <li>Assign a project where students create their own 3D animation using p5.js.</li> <li>Encourage students to explore more complex shapes and textures.</li> </ul>"},{"location":"sims/sphere/#draw-shadow","title":"Draw Shadow","text":"<pre><code>  // Draw shadow\n  drawShadow(ball.x+10, ball.y+30, ballSize);\n\n  function drawShadow(x, y, size) {\n  push();\n    noStroke();\n    fill(50, 50, 50, 100); // Semi-transparent shadow\n    ellipse(x, y + size / 4, size * 0.8, size / 8);\n  pop();\n}\n</code></pre>"},{"location":"sims/sphere/#references","title":"References","text":"<ul> <li>YouTube Video of the Amiga Boing Ball</li> <li>p5.js Reference</li> <li>p5.js Web Editor</li> </ul>"},{"location":"sims/template/","title":"MicroSim Template","text":"Figure caption. <p>Link to Demo</p>"},{"location":"sims/template/#about-this-microsim","title":"About this MicroSim","text":"<p>This MicroSim teaches us how to specify the drawing of a static filled circle.</p>"},{"location":"sims/template/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Create a single file p5.js sketch.\nDraw a green circle on a 600x400 canvas with a radius of 200.\n</code></pre>"},{"location":"sims/template/#sample-response","title":"Sample Response","text":"<pre><code>let canvasHeight = 400;\nlet aspectRatio = 1.91; // Open Graph standard\nlet canvasWidth = canvasHeight * aspectRatio;\nlet radius = 200;\nfunction setup() {\nconst canvas = createCanvas(canvasWidth, canvasHeight);\n  canvas.parent('canvas-container');\n  fill(245);\n  rect(0,0, canvasWidth, canvasHeight);\n  fill('green');\n  circle(canvasWidth/2, canvasHeight/2, radius);\n}\n</code></pre>"},{"location":"sims/template/#lesson-plan","title":"Lesson Plan","text":""},{"location":"sims/template/#grade-level-subject-and-topic","title":"Grade Level, Subject and Topic","text":"<p>9th grade geometry. Circle and radius.</p>"},{"location":"sims/template/#activities","title":"Activities","text":""},{"location":"sims/template/#fill-color","title":"Fill Color","text":"<p>Change the color in the prompt.  You can specify any one of the 140 named colors.</p>"},{"location":"sims/template/#border-weight","title":"Border Weight","text":"<p>Change the prompt to include a black border of width 10.</p>"},{"location":"sims/template/#border-color","title":"Border Color","text":"<p>Change the prompt to make the border purple.</p>"},{"location":"sims/template/#change-the-radius","title":"Change the Radius","text":"<p>Change the prompt to make the circle smaller or larger by changing the radius from 10 to 200.</p>"},{"location":"sims/template/#change-the-location","title":"Change the Location","text":"<p>Change the prompt to move the circle to the left or right.</p>"}]}